TopLevel(
	main(fun1),
	program
	(
		type_block
		(
			type(s1,construct(field(label1,int),field(label2,bool)))
		),
		node
		(
			function,
			fun1,
			params(var_decls(vars(Input1),typename(s1)),var_decls(vars(Input2),typename(s1))),
			returns(var_decls(vars(Output1),int)),
			body
			(
				localvars(var_decls(vars(_L1),bool),var_decls(vars(_L2),int),var_decls(vars(_L3),typename(s1)),var_decls(vars(_L4),typename(s1)),var_decls(vars(_L5),int),var_decls(vars(_L6),int)),
				=(lvalue(ID(_L1,bool,())),binop_eq(bool,(),ID(_L3,construct(field(label1,int),field(label2,bool)),()),ID(_L4,construct(field(label1,int),field(label2,bool)),())))
,				=(lvalue(ID(_L2,int,())),if_expr((int),(()),ID(_L1,bool,()),list_expr(ID(_L5,int,())),list_expr(ID(_L6,int,()))))
,				=(lvalue(ID(_L3,construct(field(label1,int),field(label2,bool)),())),ID(Input1,construct(field(label1,int),field(label2,bool)),()))
,				=(lvalue(ID(_L4,construct(field(label1,int),field(label2,bool)),())),ID(Input2,construct(field(label1,int),field(label2,bool)),()))
,				=(lvalue(ID(_L5,int,())),INT(1))
,				=(lvalue(ID(_L6,int,())),INT(0))
,				=(lvalue(ID(Output1,int,())),ID(_L2,int,()))
			)
		)

	)
)